{"frames":[{"func":"advantage_rows %>% union(migrated_rows) %>% union(p_rows)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"union(., p_rows)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"union.data.frame(., p_rows)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"check_compatible(x, y)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(c(\"`x` and `y` are not compatible.\", compat), call = error_call)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd, .file)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in union(., p_rows) : \u001B[38;5;232m\n\u001B[31mâœ–\u001B[38;5;232m Incompatible types for column `shiptocustomernumber`: double vs character.\n\u001B[31mâœ–\u001B[38;5;232m Incompatible types for column `ordernumber`: character vs integer64.\u001B[39m\n"}